/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type RoleAdminChanged = ContractEventLog<{
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleGranted = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleRevoked = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type VoteCasted = ContractEventLog<{
  voter: string;
  votingName: string;
  option: string;
  0: string;
  1: string;
  2: string;
}>;
export type VoterAdded = ContractEventLog<{
  voter: string;
  group: string;
  0: string;
  1: string;
}>;
export type VoterModified = ContractEventLog<{
  voter: string;
  group: string;
  0: string;
  1: string;
}>;
export type VoterRemoved = ContractEventLog<{
  voter: string;
  0: string;
}>;
export type VotingCreated = ContractEventLog<{
  votingName: string;
  group: string;
  endTime: string;
  0: string;
  1: string;
  2: string;
}>;

export interface Main extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Main;
  clone(): Main;
  methods: {
    DEFAULT_ADMIN_ROLE(): NonPayableTransactionObject<string>;

    addVoter(
      voter_: string,
      group_: number | string | BN
    ): NonPayableTransactionObject<void>;

    createVoting(
      name_: string | number[],
      duration_: number | string | BN,
      options_: (string | number[])[],
      description_: string | number[],
      group_: number | string | BN
    ): NonPayableTransactionObject<void>;

    getOptions(
      votingName_: string | number[]
    ): NonPayableTransactionObject<string[]>;

    getResults(
      votingName_: string | number[]
    ): NonPayableTransactionObject<string[]>;

    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>;

    getVotingNames(): NonPayableTransactionObject<string[]>;

    getWinner(
      votingName_: string | number[]
    ): NonPayableTransactionObject<string>;

    grantRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    hasRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<boolean>;

    isVoted(
      votingName_: string | number[],
      voter_: string
    ): NonPayableTransactionObject<boolean>;

    modifyVoter(
      voter_: string,
      newGroup_: number | string | BN
    ): NonPayableTransactionObject<void>;

    removeVoter(voter_: string): NonPayableTransactionObject<void>;

    renounceRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    revokeRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    vote(
      votingName_: string | number[],
      voteFor_: string | number[]
    ): NonPayableTransactionObject<void>;

    voters(arg0: string): NonPayableTransactionObject<{
      whitelisted: boolean;
      group: string;
      0: boolean;
      1: string;
    }>;

    votingNames(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    votings(arg0: string | number[]): NonPayableTransactionObject<{
      description: string;
      group: string;
      endTime: string;
      0: string;
      1: string;
      2: string;
    }>;
  };
  events: {
    RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter;
    RoleAdminChanged(
      options?: EventOptions,
      cb?: Callback<RoleAdminChanged>
    ): EventEmitter;

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter;
    RoleGranted(
      options?: EventOptions,
      cb?: Callback<RoleGranted>
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>
    ): EventEmitter;

    VoteCasted(cb?: Callback<VoteCasted>): EventEmitter;
    VoteCasted(options?: EventOptions, cb?: Callback<VoteCasted>): EventEmitter;

    VoterAdded(cb?: Callback<VoterAdded>): EventEmitter;
    VoterAdded(options?: EventOptions, cb?: Callback<VoterAdded>): EventEmitter;

    VoterModified(cb?: Callback<VoterModified>): EventEmitter;
    VoterModified(
      options?: EventOptions,
      cb?: Callback<VoterModified>
    ): EventEmitter;

    VoterRemoved(cb?: Callback<VoterRemoved>): EventEmitter;
    VoterRemoved(
      options?: EventOptions,
      cb?: Callback<VoterRemoved>
    ): EventEmitter;

    VotingCreated(cb?: Callback<VotingCreated>): EventEmitter;
    VotingCreated(
      options?: EventOptions,
      cb?: Callback<VotingCreated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "RoleAdminChanged", cb: Callback<RoleAdminChanged>): void;
  once(
    event: "RoleAdminChanged",
    options: EventOptions,
    cb: Callback<RoleAdminChanged>
  ): void;

  once(event: "RoleGranted", cb: Callback<RoleGranted>): void;
  once(
    event: "RoleGranted",
    options: EventOptions,
    cb: Callback<RoleGranted>
  ): void;

  once(event: "RoleRevoked", cb: Callback<RoleRevoked>): void;
  once(
    event: "RoleRevoked",
    options: EventOptions,
    cb: Callback<RoleRevoked>
  ): void;

  once(event: "VoteCasted", cb: Callback<VoteCasted>): void;
  once(
    event: "VoteCasted",
    options: EventOptions,
    cb: Callback<VoteCasted>
  ): void;

  once(event: "VoterAdded", cb: Callback<VoterAdded>): void;
  once(
    event: "VoterAdded",
    options: EventOptions,
    cb: Callback<VoterAdded>
  ): void;

  once(event: "VoterModified", cb: Callback<VoterModified>): void;
  once(
    event: "VoterModified",
    options: EventOptions,
    cb: Callback<VoterModified>
  ): void;

  once(event: "VoterRemoved", cb: Callback<VoterRemoved>): void;
  once(
    event: "VoterRemoved",
    options: EventOptions,
    cb: Callback<VoterRemoved>
  ): void;

  once(event: "VotingCreated", cb: Callback<VotingCreated>): void;
  once(
    event: "VotingCreated",
    options: EventOptions,
    cb: Callback<VotingCreated>
  ): void;
}
